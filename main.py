import discord
from discord.ext import commands
from discord import app_commands
import asyncio
import os
import json
import random
import re
import requests
from base64 import b64decode, b64encode
import aiohttp
import unidecode
from datetime import datetime, timezone, timedelta

# Configura√ß√£o do bot
intents = discord.Intents.default()
intents.voice_states = True
intents.members = True
intents.message_content = True
prefix = 'foa!'
DISCORDTOKEN = os.getenv("DISCORD_BOT_TOKEN")
GITHUBTOKEN = os.getenv("DATABASE_TOKEN")
luky = 767015394648915978
usuarios_autorizados = [luky]
updateyn = 0
github_repo = "Lukydnomo/discord-bot"
json_file_path = "database.json"
NOME_ORIGINAL = "FranBOT"
CAMINHO_AVATAR_ORIGINAL = "assets/images/FranBOT-Logo.png"

class MyBot(commands.Bot):
    def __init__(self):
        super().__init__(command_prefix=prefix, intents=intents)

    # Sincroniza comandos quando o bot inicia
    async def setup_hook(self):
        await self.tree.sync()  # Sincroniza comandos globalmente
        print("‚úÖ Comandos sincronizados globalmente!")

bot = MyBot()

# Nome do arquivo Markdown
arquivo_md = "changelog.md"

# Abrir o arquivo em modo leitura
with open(arquivo_md, "r", encoding="utf-8") as arquivo:
    conteudo = arquivo.read()  # L√™ todo o conte√∫do do arquivo e coloca na vari√°vel

# Escolhe usu√°rio aleat√≥rio
def randomuser():
    for guild in bot.guilds:  # Itera sobre os servidores onde o bot est√°
        members = [member for member in guild.members if not member.bot]  # Filtra membros n√£o-bots
        
        if members:
            return random.choice(members)  # Retorna um membro aleat√≥rio
    
    return "fudeu nego"  # Retorno caso n√£o haja membros v√°lidos
# Fun√ß√£o para salvar a mensagem deletada no arquivo JSON
async def save_deleted_message(message):
    data = get_file_content()

    deleted_message_data = {
        "author": message.author.name,
        "content": message.content,
        "timestamp": str(message.created_at),
        "channel_id": message.channel.id
    }

    # Garante que "deleted_messages" √© uma lista
    if "deleted_messages" not in data or not isinstance(data["deleted_messages"], list):
        data["deleted_messages"] = []

    # Adicionando a mensagem deletada ao banco de dados
    data["deleted_messages"].append(deleted_message_data)

    # Atualizando o arquivo com a nova mensagem deletada
    await save("deleted_messages", data)
# Fun√ß√£o para verificar se passaram 5 minutos e reenviar a mensagem
async def check_and_resend_loop():
    # Canal de logs onde erros ser√£o reportados
    error_log_channel_id = 1317580138262695967  # Substitua pelo ID do canal de log de erros
    error_log_channel = bot.get_channel(error_log_channel_id)

    while True:
        data = get_file_content()

        if not data or "deleted_messages" not in data or "deleted_messages" not in data["deleted_messages"]:
            if error_log_channel:
                await error_log_channel.send("üîç Nenhuma mensagem deletada encontrada.")
            await asyncio.sleep(10)

        deleted_messages = data["deleted_messages"]["deleted_messages"]
        now = datetime.now(timezone.utc)

        for deleted_message_data in deleted_messages:
            if not deleted_message_data:
                continue

            if isinstance(deleted_message_data, str):
                try:
                    deleted_message_data = json.loads(deleted_message_data)
                except json.JSONDecodeError:
                    if error_log_channel:
                        await error_log_channel.send(f"‚ö†Ô∏è Erro ao decodificar JSON da mensagem deletada: {deleted_message_data}")
                    continue

            if "timestamp" not in deleted_message_data or "channel_id" not in deleted_message_data:
                if error_log_channel:
                    await error_log_channel.send(f"‚ö†Ô∏è Mensagem deletada sem timestamp ou channel_id: {deleted_message_data}")
                continue

            # Debug: printar o timestamp
            print(f"‚è≥ Timestamp da mensagem: {deleted_message_data['timestamp']}")

            # Ajustar o timestamp removendo o sufixo se presente
            timestamp_str = deleted_message_data["timestamp"]
            if timestamp_str.endswith("+00:00"):
                timestamp_str = timestamp_str.replace("+00:00", "").strip()

            try:
                timestamp = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S.%f").replace(tzinfo=timezone.utc)
            except ValueError:
                try:
                    timestamp = datetime.strptime(timestamp_str, "%Y-%m-%d %H:%M:%S").replace(tzinfo=timezone.utc)
                except ValueError:
                    if error_log_channel:
                        await error_log_channel.send(f"‚ùå Erro ao converter timestamp para a mensagem: {deleted_message_data}")
                    continue

            time_diff = (now - timestamp).total_seconds() / 60
            print(f"‚è≥ Tempo decorrido: {time_diff} minutos")

            if 5 <= time_diff < 7:
                channel_id = deleted_message_data["channel_id"]
                channel = bot.get_channel(channel_id)
                if channel is None:
                    if error_log_channel:
                        await error_log_channel.send(f"‚ùå Erro: Canal {channel_id} n√£o encontrado.")
                    continue

                print(f"üì© Enviando mensagem deletada no canal {channel_id}...")
                try:
                    await channel.send(f"Ah, voc√™s lembram quando {deleted_message_data['author']} mandou isso? '{deleted_message_data['content']}'")
                except Exception as e:
                    if error_log_channel:
                        await error_log_channel.send(f"‚ùå Erro ao tentar enviar mensagem no canal {channel_id}: {e}")
                    continue

                # Remove a mensagem do JSON
                data["deleted_messages"]["deleted_messages"] = [msg for msg in deleted_messages if msg != deleted_message_data]
                print(f"‚úÖ Mensagem removida do banco de dados.")
                await save("deleted_messages", data)

        await asyncio.sleep(10)

# Database System
async def stop_github_actions():
    run_id = os.getenv('RUN_ID')
    
    if not run_id:
        print("Erro: run_id n√£o encontrado.")
        return
    
    url = f"https://api.github.com/repos/{github_repo}/actions/runs/{run_id}/cancel"
    headers = {"Authorization": f"token {GITHUBTOKEN}"}
    
    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers) as response:
            if response.status == 202:
                print("Inst√¢ncia do GitHub Actions finalizada com sucesso.")
            else:
                print(f"Falha ao finalizar inst√¢ncia: {response.status}, {await response.text()}")
def get_file_content():
    url = f"https://api.github.com/repos/{github_repo}/contents/{json_file_path}"
    headers = {"Authorization": f"token {GITHUBTOKEN}"}
    response = requests.get(url, headers=headers).json()

    if "content" in response:
        try:
            return json.loads(b64decode(response["content"]).decode())
        except json.JSONDecodeError:
            return {}  # Retorna um dicion√°rio vazio se houver erro na decodifica√ß√£o
    elif response.get("message") == "Not Found":
        return {}  # Retorna um dicion√°rio vazio se o arquivo n√£o existir ainda
    else:
        print(f"Erro ao buscar o arquivo: {response}")  # Para depura√ß√£o
        return {}
def update_file_content(data):
    url = f"https://api.github.com/repos/{github_repo}/contents/{json_file_path}"
    headers = {"Authorization": f"token {GITHUBTOKEN}"}
    current_data = requests.get(url, headers=headers).json()
    
    sha = current_data.get("sha", "") if "sha" in current_data else None
    new_content = b64encode(json.dumps(data, indent=4).encode()).decode()
    commit_message = "Atualizando banco de dados"

    payload = {"message": commit_message, "content": new_content}
    if sha:
        payload["sha"] = sha  # Apenas se o arquivo j√° existir

    requests.put(url, headers=headers, json=payload)
async def save(name, value):
    data = get_file_content()
    if name in data:
        if isinstance(data[name], list):
            data[name].append(value)
        else:
            data[name] = [data[name], value]
    else:
        data[name] = value
    update_file_content(data)

    # Aguardar 35 segundos antes de parar o bot
    await asyncio.sleep(35)
    
    # Finalizar a inst√¢ncia do bot no GitHub Actions
    await stop_github_actions()
def load(name):
    data = get_file_content()
    return data.get(name, None)

# Castigo
async def castigar_automatico(member: discord.Member, tempo: int):
    # Fun√ß√£o para aplicar Time-Out automaticamente sem usar comandos.
    try:
        # Usando datetime.timedelta para definir a dura√ß√£o do Time-Out
        duration = timedelta(seconds=tempo)
        until_time = datetime.now() + duration  # Calcula o tempo futuro do Time-Out

        # Aplica o Time-Out at√© o momento calculado
        await member.timeout(until=until_time, reason="Castigo autom√°tico")
        print(f'{member.mention} foi colocado em Time-Out por {tempo} segundos devido a uma condi√ß√£o.')
    except discord.DiscordException as e:
        print(f'Ocorreu um erro ao tentar colocar {member.mention} em Time-Out: {e}')

# Fun√ß√£o para punir um membro
async def punir_logic(ctx, member: discord.Member, punish_channel: discord.VoiceChannel, duration: int = 1):
    try:
        # Verifica permiss√µes do autor
        if ctx.author.top_role <= ctx.guild.me.top_role:
            await ctx.send("‚ùå **Voc√™ precisa ter um cargo superior ao meu para usar este comando!**")
            return

        # Verifica se o autor est√° em um canal de voz
        if not ctx.author.voice:
            await ctx.send("‚ùå **Voc√™ precisa estar em um canal de voz para usar este comando!**")
            return

        # Salva o canal original e move o membro para o canal de puni√ß√£o
        original_channel = member.voice.channel if member.voice else None
        await member.move_to(punish_channel)
        await ctx.send(f'‚úÖ **{member.mention} foi punido e movido para {punish_channel.name} por {duration} minutos**')

        # Desabilita a permiss√£o de conectar aos outros canais
        for channel in ctx.guild.voice_channels:
            if channel != punish_channel:
                await channel.set_permissions(member, connect=False)

        # Aguarda a dura√ß√£o da puni√ß√£o
        await asyncio.sleep(duration * 60)

        # Restaura as permiss√µes de conex√£o
        for channel in ctx.guild.voice_channels:
            if channel != punish_channel:
                await channel.set_permissions(member, overwrite=None)

        # Move o membro de volta para o canal original
        if original_channel:
            await member.move_to(original_channel)
            await ctx.send(f'‚úÖ **{member.mention} foi movido de volta para {original_channel.name}**')
        else:
            await ctx.send(f'‚úÖ **{member.mention} foi liberado, mas n√£o havia um canal original para mov√™-lo.**')

    except discord.Forbidden:
        await ctx.send("‚ùå **Eu n√£o tenho permiss√£o suficiente para executar essa a√ß√£o!**")
    except discord.HTTPException as e:
        await ctx.send(f"‚ùå **Ocorreu um erro ao mover o membro: {e}**")
    except Exception as e:
        await ctx.send(f"‚ùå **Algo deu errado: {e}**")

# Evento de quando o bot estiver pronto
@bot.event
async def on_ready():
    await asyncio.sleep(3)
    updatechannel = bot.get_channel(1319356880627171448)
    
    #bot.loop.create_task(check_and_resend_loop())

    print(f'Bot conectado como {bot.user}')
    for guild in bot.guilds:
        try:
            print(f"Sincronizando comandos para o servidor: {guild.name}")
            await bot.tree.sync(guild=guild)
            print(f"‚úÖ Comandos sincronizados com sucesso para o servidor: {guild.name}")
        except Exception as e:
            print(f"‚ùå Falha ao sincronizar comandos no servidor {guild.name}: {e}")

    activity = discord.Activity(
        type=discord.ActivityType.playing,
        name="Trabalhando pro Myuki",
        details="(E pro Luky)",
        large_image="punish",
        large_text="Moderando",
        small_image="punish",
        small_text="Feito por Luky",
    )
    await bot.change_presence(activity=activity)

    if updateyn == 1:
        if updatechannel:
            await updatechannel.send(f"{conteudo}\n\n<@&1319355628195549247>")
        else:
            print("‚ùå Canal de atualiza√ß√£o n√£o encontrado.")
    else:
        print("‚ùå Atualiza√ß√£o n√£o habilitada.")

# Fun√ß√£o para processar a rolagem de dados
def rolar_dado(expressao, detalhado=True):
    if not detalhado:
        # Comportamento antigo: apenas substitui e avalia a express√£o
        def substituir(match):
            qtd, faces = match.groups()
            qtd = int(qtd) if qtd else 1
            faces = int(faces)
            return str(sum(random.randint(1, faces) for _ in range(qtd)))
        expr_mod = re.sub(r'(\d*)d(\d+)', substituir, expressao)
        try:
            resultado = eval(expr_mod)
        except:
            return None
        return {"resultado": resultado, "resultadoWOutEval": expr_mod, "detalhado": False}
    else:
        # Novo comportamento: captura os resultados individuais de cada grupo de dados
        detalhes = []  # Armazena os resultados individuais de cada grupo
        def substituir(match):
            qtd_str, faces_str = match.groups()
            qtd = int(qtd_str) if qtd_str else 1
            faces = int(faces_str)
            # Rola cada dado individualmente
            rolagens = [random.randint(1, faces) for _ in range(qtd)]
            # Armazena a lista ordenada do maior para o menor
            detalhes.append(sorted(rolagens, reverse=True))
            # Retorna a soma para a avalia√ß√£o matem√°tica
            return str(sum(rolagens))
        expr_mod = re.sub(r'(\d*)d(\d+)', substituir, expressao)
        try:
            resultado = eval(expr_mod)
        except:
            return None
        # Se houver apenas um grupo de dados, usamos o resultado dele; caso contr√°rio, juntamos os resultados
        if len(detalhes) == 1:
            breakdown = str(detalhes[0])
            # Extrai o grupo de dados original (por exemplo, "5d5")
            m = re.search(r'(\d*d\d+)', expressao)
            dice_group = m.group(1) if m else expressao
        else:
            breakdown = " + ".join(str(lst) for lst in detalhes)
            dice_group = expressao
        return {
            "resultado": resultado,
            "resultadoWOutEval": breakdown,
            "dice_group": dice_group,
            "detalhado": True
        }
# Comando de rolagem de dado (/rolar)
@bot.tree.command(name="rolar", description="Rola dados no formato XdY com opera√ß√µes matem√°ticas")
@app_commands.describe(expressao="Exemplo: 2d6+2, 4d10/2, 5#d5+5")
async def rolar(interaction: discord.Interaction, expressao: str):
    if "#" in expressao:
        # Se for m√∫ltiplo (5#d5+5): usa o comportamento n√£o detalhado
        qtd, dado = expressao.split("#", 1)
        qtd = int(qtd)
        resultados = [rolar_dado(dado, detalhado=False) for _ in range(qtd)]
        msg = "\n".join(
            f"``{r['resultado']}`` ‚üµ [{r['resultadoWOutEval']}] {expressao}"
            for r in resultados
        )
        return await interaction.response.send_message(msg)
    else:
        # Para rolagens simples, usa o comportamento detalhado
        res = rolar_dado(expressao, detalhado=True)
        if res is None:
            return await interaction.response.send_message("‚ùå Express√£o inv√°lida!", ephemeral=True)
        # Aqui n√£o encapsulamos em colchetes, pois o breakdown j√° vem formatado (ex.: "[5, 4, 3, 2, 1]")
        msg = f"``{res['resultado']}`` ‚üµ {res['resultadoWOutEval']} {res.get('dice_group', expressao)}"
        return await interaction.response.send_message(msg)

# Respostas de on_message
REACTIONS = {
    "bem-vindo": ["üëã", "üéâ"],    # Reage com üëã e üéâ a mensagens contendo "bem-vindo"
    "importante": ["‚ö†Ô∏è", "üì¢"],   # Reage com ‚ö†Ô∏è e üì¢ a mensagens contendo "importante"
    "parab√©ns": ["ü•≥", "üéä"],      # Reage com ü•≥ e üéä a mensagens contendo "parab√©ns"
    "obrigado": ["üôè"],           # Reage com üôè a mensagens contendo "obrigado"
}
SARCASM_RESPONSES = [
    "Escreveu a b√≠blia carai",
    "Ning√∫em perguntou",
    "E o fodasse?",
    "Meu tico que eu vou ler isso",
    "Minhas bola",
    "Seloko t√° escrevendo mais que o Ozamu Tezuka",
    f"Reda√ß√£o do enem nota {random.randrange(0,300)}",
    "Esse a√≠ passa em medicina",
    "Reda√ß√£o do krl tmnc",
    "Bora escrever um livro cria?",
    "Esse texto a√≠ vai virar curso de faculdade",
    "Parece que voc√™ leu o manual do lil penis",
    "Escreveu mais que a lista de clientes de um editor de v√≠deo",
    "Meu Deus, n√£o sabia que voc√™ era escritor (naipe ichiro oda)",
    "Vai lan√ßar uma s√©rie de 20 temporadas com esse texto? Pq se for a netflix enfia no cu",
    "Parece um epis√≥dio de anime cheio de filler, n√£o, pior, PARECE UM AD DA TWITCH ESSA PORRA",
    "Texto mais longo que meu pau",
    "Voc√™ n√£o cansa de se ouvir?",
    "Parece que escreveu a vers√£o expandida do Senhor dos Anais",
    "Vai lan√ßar um audiobook?"
]
def is_spam(text):
    # Remove espa√ßos e ignora letras mai√∫sculas/min√∫sculas
    normalized = text.replace(" ", "").lower()

    # Se for s√≥ um caractere repetido v√°rias vezes, √© spam
    if len(set(normalized)) == 1:
        return True

    # Se for s√≥ um pequeno grupo de caracteres repetindo v√°rias vezes (ex: "lolololol", "haha haha")
    match = re.fullmatch(r"(.+?)\1+", normalized)
    if match:
        return True

    return False

# Evento on_message com suporte para rolagem via "$"
@bot.event
async def on_message(message):
    if message.author.bot:
        return  # Ignora mensagens de bots

    # Adiciona rea√ß√µes pr√©-definidas
    for keyword, emojis in REACTIONS.items():
        if keyword in message.content.lower():
            for emoji in emojis:
                try:
                    await message.add_reaction(emoji)
                except discord.Forbidden:
                    print(f"‚ùå N√£o tenho permiss√£o para reagir a mensagens em {message.channel}")

    # Detecta express√µes de rolagem no formato "$..."
    matches = re.findall(r'\$(\d*#?\d*d\d+[\+\-\*/\(\)\d]*)', message.content)
    resultados = []
    if matches:
        for m in matches:
            if '#' in m:
                # Se houver "#" na express√£o, dividimos em quantidade e o dado base
                qtd_str, dado = m.split("#", 1)
                try:
                    qtd = int(qtd_str)
                except ValueError:
                    qtd = 1  # Caso n√£o consiga converter, assume 1
                # Rola a express√£o "dado" a quantidade especificada
                for _ in range(qtd):
                    res = rolar_dado(dado, detalhado=False)
                    resultados.append(
                        f"``{res['resultado']}`` ‚üµ [{res['resultadoWOutEval']}] {m}"
                    )
            else:
                res = rolar_dado(m, detalhado=True)
                resultados.append(
                    f"``{res['resultado']}`` ‚üµ {res['resultadoWOutEval']} {res.get('dice_group', m)}"
                )
        await message.channel.send("\n".join(resultados))
        
    # Respostas sarcasticas
    if len(message.content) > 300 and not is_spam(message.content):
        await asyncio.sleep(2)
        async with message.channel.typing():  # Usa o contexto ass√≠ncrono para simular digita√ß√£o
            await asyncio.sleep(3)  # Aguarda 3 segundos (opcional)
            await message.channel.send(random.choice(SARCASM_RESPONSES))  # Envia a resposta

    # Palavras pro√≠bidas (memes poggers heinn)
    if "banana" in message.content.lower():
        await message.channel.send(f'BANANA DETECTADA!!!! INICIANDO PROTOCOLO DE SEGURAN√áA!!!!!')
        await castigar_automatico(message.author, 60)

    await bot.process_commands(message)
#@bot.event
#async def on_message_delete(message):
    #print(f"Mensagem deletada: {message.content}")
    #await save_deleted_message(message)

# Comando prefixado "punir"
@bot.command(name="punir")
async def punir(ctx, member: discord.Member, punish_channel: discord.VoiceChannel, duration: int = 1):
    await punir_logic(ctx, member, punish_channel, duration)

# Comando de barra "/punir"
@bot.tree.command(name="punir", description="Pune um membro movendo-o para um canal de voz espec√≠fico por um tempo determinado.")
@app_commands.describe(
    member="Membro a ser punido",
    punish_channel="Canal de voz onde o membro ser√° movido",
    duration="Dura√ß√£o da puni√ß√£o em minutos (opcional, padr√£o: 1 minuto)"
)
async def punir(interaction: discord.Interaction, member: discord.Member, punish_channel: discord.VoiceChannel, duration: int = 1):
    fake_ctx = await commands.Context.from_interaction(interaction)
    await punir_logic(fake_ctx, member, punish_channel, duration)

@bot.tree.command(name="mover", description="Move todos os membros de um canal de voz para outro")
@app_commands.describe(origem="Canal de onde os usu√°rios ser√£o movidos",
                        destino="Canal para onde os usu√°rios ser√£o movidos",
                        cargo="(Opcional) Apenas move membros com um cargo espec√≠fico")
async def mover(interaction: discord.Interaction, origem: discord.VoiceChannel, destino: discord.VoiceChannel, cargo: discord.Role = None):
    if not interaction.user.guild_permissions.move_members:
        return await interaction.response.send_message("üö´ Voc√™ n√£o tem permiss√£o para mover membros!", ephemeral=True)

    membros_movidos = 0

    for membro in origem.members:
        if cargo and cargo not in membro.roles:
            continue  # Se um cargo foi especificado, ignora membros que n√£o o possuem
        try:
            await membro.move_to(destino)
            membros_movidos += 1
        except discord.Forbidden:
            await interaction.response.send_message(f"üö® N√£o tenho permiss√£o para mover {membro.mention}!", ephemeral=True)

    await interaction.response.send_message(f"‚úÖ **{membros_movidos}** membros movidos de {origem.mention} para {destino.mention}!")

@bot.tree.command(name="mutar", description="Muta todos em um canal de voz, um usu√°rio ou um cargo espec√≠fico")
@app_commands.describe(
    canal="Canal de voz onde os membros ser√£o mutados",
    excecao_usuario="(Opcional) Usu√°rio que N√ÉO ser√° mutado",
    excecao_cargo="(Opcional) Cargo cujos membros N√ÉO ser√£o mutados",
    apenas_usuario="(Opcional) Mutar SOMENTE este usu√°rio",
    apenas_cargo="(Opcional) Mutar SOMENTE este cargo"
)
async def mutar(
    interaction: discord.Interaction,
    canal: discord.VoiceChannel,
    excecao_usuario: discord.Member = None,
    excecao_cargo: discord.Role = None,
    apenas_usuario: discord.Member = None,
    apenas_cargo: discord.Role = None
):
    if not interaction.user.guild_permissions.mute_members:
        return await interaction.response.send_message("üö´ Voc√™ n√£o tem permiss√£o para mutar membros!", ephemeral=True)

    # Mutar apenas um usu√°rio
    if apenas_usuario:
        try:
            await apenas_usuario.edit(mute=True)
            return await interaction.response.send_message(f"üîá {apenas_usuario.mention} foi mutado em {canal.mention}!")
        except discord.Forbidden:
            return await interaction.response.send_message(f"üö® N√£o tenho permiss√£o para mutar {apenas_usuario.mention}!", ephemeral=True)

    # Mutar apenas um cargo
    if apenas_cargo:
        membros_mutados = 0
        for membro in canal.members:
            if apenas_cargo in membro.roles:
                try:
                    await membro.edit(mute=True)
                    membros_mutados += 1
                except discord.Forbidden:
                    await interaction.response.send_message(f"üö® N√£o tenho permiss√£o para mutar {membro.mention}!", ephemeral=True)
        return await interaction.response.send_message(f"üîá **{membros_mutados}** membros do cargo {apenas_cargo.mention} foram mutados em {canal.mention}!")

    # Mutar todo mundo (exceto quem for exce√ß√£o)
    membros_mutados = 0
    for membro in canal.members:
        if membro == excecao_usuario or (excecao_cargo and excecao_cargo in membro.roles):
            continue  # Pula quem deve ser ignorado

        try:
            await membro.edit(mute=True)
            membros_mutados += 1
        except discord.Forbidden:
            await interaction.response.send_message(f"üö® N√£o tenho permiss√£o para mutar {membro.mention}!", ephemeral=True)

    await interaction.response.send_message(f"üîá **{membros_mutados}** membros foram mutados em {canal.mention}!")
@bot.tree.command(name="desmutar", description="Desmuta todos em um canal de voz ou apenas um membro espec√≠fico")
@app_commands.describe(
    canal="Canal de voz onde os membros ser√£o desmutados",
    apenas_usuario="(Opcional) Desmutar SOMENTE este usu√°rio",
    apenas_cargo="(Opcional) Desmutar SOMENTE membros desse cargo"
)
async def desmutar(
    interaction: discord.Interaction,
    canal: discord.VoiceChannel,
    apenas_usuario: discord.Member = None,
    apenas_cargo: discord.Role = None
):
    if not interaction.user.guild_permissions.mute_members:
        return await interaction.response.send_message("üö´ Voc√™ n√£o tem permiss√£o para desmutar membros!", ephemeral=True)

    if apenas_usuario:
        try:
            await apenas_usuario.edit(mute=False)
            return await interaction.response.send_message(f"üîä {apenas_usuario.mention} foi desmutado em {canal.mention}!")
        except discord.Forbidden:
            return await interaction.response.send_message(f"üö® N√£o tenho permiss√£o para desmutar {apenas_usuario.mention}!", ephemeral=True)

    membros_desmutados = 0

    for membro in canal.members:
        if apenas_cargo and apenas_cargo not in membro.roles:
            continue  # Pula quem n√£o faz parte do cargo especificado

        try:
            await membro.edit(mute=False)
            membros_desmutados += 1
        except discord.Forbidden:
            await interaction.response.send_message(f"üö® N√£o tenho permiss√£o para desmutar {membro.mention}!", ephemeral=True)

    if apenas_cargo:
        await interaction.response.send_message(f"üîä **{membros_desmutados}** membros com o cargo {apenas_cargo.mention} foram desmutados em {canal.mention}!")
    else:
        await interaction.response.send_message(f"üîä **{membros_desmutados}** membros foram desmutados em {canal.mention}!")

JOKENPO_OPCOES = {
    "ü™®": "Pedra",
    "üìú": "Papel",
    "‚úÇÔ∏è": "Tesoura"
}
@bot.tree.command(name="jokenpo", description="Desafie algu√©m para uma partida de Jokenp√¥!")
async def jokenpo(interaction: discord.Interaction):
    await interaction.response.send_message("üéÆ **Jokenp√¥ Iniciado!** Aguardando outro jogador... Reaja com üéÆ para entrar!", ephemeral=False)

    msg = await interaction.original_response()
    await msg.add_reaction("üéÆ")

    def check_jogador2(reaction, user):
        return reaction.message.id == msg.id and str(reaction.emoji) == "üéÆ" and user != interaction.user and not user.bot

    try:
        reaction, jogador2 = await bot.wait_for("reaction_add", timeout=30.0, check=check_jogador2)
    except asyncio.TimeoutError:
        try:
            await msg.clear_reaction("üéÆ")  # Remove a rea√ß√£o para evitar confus√£o
            await msg.edit(content="‚è≥ **Tempo esgotado!** Nenhum jogador entrou.")
        except discord.errors.NotFound:
            print("‚ö†Ô∏è Mensagem n√£o encontrada. Provavelmente foi deletada ou expirou.")
        return

    await msg.clear_reactions()
    await msg.edit(content=f"üÜö {interaction.user.mention} **vs** {jogador2.mention}!\n\nEscolham Pedra (ü™®), Papel (üìú) ou Tesoura (‚úÇÔ∏è) reagindo abaixo!")

    for emoji in JOKENPO_OPCOES.keys():
        await msg.add_reaction(emoji)

    escolhas = {interaction.user: None, jogador2: None}

    def check_escolha(reaction, user):
        return reaction.message.id == msg.id and user in escolhas and str(reaction.emoji) in JOKENPO_OPCOES and escolhas[user] is None

    while None in escolhas.values():
        try:
            reaction, user = await bot.wait_for("reaction_add", timeout=30.0, check=check_escolha)
            escolhas[user] = JOKENPO_OPCOES[str(reaction.emoji)]
        except asyncio.TimeoutError:
            try:
                await msg.clear_reactions()
                await msg.edit(content="‚è≥ **Tempo esgotado!** Um dos jogadores n√£o escolheu a tempo.")
            except discord.errors.NotFound:
                print("‚ö†Ô∏è Mensagem n√£o encontrada. Provavelmente foi deletada ou expirou.")
            return

    # Determinar vencedor
    resultado = determinar_vencedor(escolhas[interaction.user], escolhas[jogador2])
    try:
        await msg.clear_reactions()
        await msg.edit(content=f"üÜö {interaction.user.mention} **vs** {jogador2.mention}!\n\n"
                               f"üé≠ **Escolhas:**\n"
                               f"üîπ {interaction.user.mention} escolheu **{escolhas[interaction.user]}**\n"
                               f"üîπ {jogador2.mention} escolheu **{escolhas[jogador2]}**\n\n"
                               f"{resultado}")
    except discord.errors.NotFound:
        print("‚ö†Ô∏è Mensagem n√£o encontrada. Provavelmente foi deletada ou expirou.")
def determinar_vencedor(jogada1, jogada2):
    if jogada1 == jogada2:
        return "ü§ù **Empate!**"
    elif (jogada1 == "Pedra" and jogada2 == "Tesoura") or \
         (jogada1 == "Papel" and jogada2 == "Pedra") or \
         (jogada1 == "Tesoura" and jogada2 == "Papel"):
        return "üéâ **O primeiro jogador venceu!**"
    else:
        return "üéâ **O segundo jogador venceu!**"

@bot.tree.command(name="db_test", description="Testa o banco de dados")
@app_commands.describe(action="Escolha entre save ou load", name="Nome da chave", value="Valor a ser salvo (apenas para save)")
async def db_test(interaction: discord.Interaction, action: str, name: str, value: str = None):
    # Defer a resposta para garantir mais tempo para processamento
    await interaction.response.defer()

    if action == "save":
        if value is None:
            await interaction.followup.send("Voc√™ precisa fornecer um valor para salvar!", ephemeral=True)
            return
        await save(name, value)
        await interaction.followup.send(f"Salvo: `{name}` = `{value}`")
    elif action == "load":
        result = load(name)
        if result is None:
            await interaction.followup.send(f"Nenhum dado encontrado para `{name}`.", ephemeral=True)
        else:
            await interaction.followup.send(f"Valor de `{name}`: `{result}`")
    else:
        await interaction.followup.send("A√ß√£o inv√°lida! Use 'save' ou 'load'.", ephemeral=True)

# Tocador
voice_clients = {}
queues = {}
def check_auto_disconnect(guild_id):
    async def task():
        await asyncio.sleep(60)  # Aguarda 1 minuto
        vc = voice_clients.get(guild_id)
        if vc and not vc.is_playing() and not queues.get(guild_id):
            await vc.disconnect()
            del voice_clients[guild_id]
            del queues[guild_id]  # Limpa tamb√©m a fila

    # Certifica-se de que o loop de eventos correto est√° sendo utilizado
    loop = bot.loop # Obt√©m o loop de eventos do discord client
    asyncio.run_coroutine_threadsafe(task(), loop)  # Executa a tarefa de forma segura no loop principal
def play_next(guild_id):
    if guild_id in queues and queues[guild_id]:  # Verifica se a chave existe antes de acessar
        audio_file = queues[guild_id].pop(0)
        vc = voice_clients[guild_id]
        
        def after_playback(error):
            if error:
                print(f"Erro ao tocar √°udio: {error}")
            if not queues[guild_id]:  # Verifica se a fila ficou vazia ap√≥s tocar
                check_auto_disconnect(guild_id)  # Chama a fun√ß√£o para desconectar se n√£o houver mais √°udios

            play_next(guild_id)  # Toca o pr√≥ximo √°udio da fila

        vc.play(discord.FFmpegPCMAudio(audio_file), after=after_playback)
    else:
        check_auto_disconnect(guild_id)  # Se a fila estiver vazia, desconectar
def buscar_arquivo(nome):
    nome_normalizado = unidecode.unidecode(nome).lower()
    for root, _, files in os.walk("assets/audios"):
        for file in files:
            if unidecode.unidecode(file).lower().startswith(nome_normalizado):
                return os.path.join(root, file)
    return None
@bot.tree.command(name="entrar", description="Faz o bot entrar no canal de voz e permanecer l√°")
@app_commands.describe(canal="Canal de voz onde o bot entrar√°")
async def entrar(interaction: discord.Interaction, canal: discord.VoiceChannel):
    if not interaction.user.guild_permissions.connect:
        return await interaction.response.send_message("üö´ Voc√™ n√£o tem permiss√£o para usar este comando!", ephemeral=True)
    
    if interaction.guild.id in voice_clients:
        return await interaction.response.send_message("‚ö†Ô∏è J√° estou em um canal de voz!", ephemeral=True)
    
    vc = await canal.connect()
    voice_clients[interaction.guild.id] = vc
    await interaction.response.send_message(f"üîä Entrei no canal {canal.mention}!")
@bot.tree.command(name="tocar", description="Toca um √°udio no canal de voz sem sair")
@app_commands.describe(arquivo="Nome do arquivo de √°udio (deve estar no reposit√≥rio do bot)")
async def tocar(interaction: discord.Interaction, arquivo: str):
    guild_id = interaction.guild.id
    vc = voice_clients.get(guild_id)
    
    if not vc:
        canal = interaction.user.voice.channel if interaction.user.voice else None
        if not canal:
            return await interaction.response.send_message("‚ùå Voc√™ n√£o est√° em um canal de voz e o bot tamb√©m n√£o est√°!", ephemeral=True)
        vc = await canal.connect()
        voice_clients[guild_id] = vc

    audio_file = buscar_arquivo(arquivo)
    if not audio_file:
        return await interaction.response.send_message("‚ùå Arquivo de √°udio n√£o encontrado!", ephemeral=True)

    if guild_id not in queues:
        queues[guild_id] = []
    
    queues[guild_id].append(audio_file)
    
    if not vc.is_playing():
        play_next(guild_id)
        await interaction.response.send_message(f"üéµ Tocando `{arquivo}`!")
    else:
        await interaction.response.send_message(f"üé∂ `{arquivo}` adicionado √† fila!")
@bot.tree.command(name="listar", description="Lista todos os √°udios")
async def listar(interaction: discord.Interaction):
    diretorio = "assets/audios"
    if not os.path.exists(diretorio):
        return await interaction.response.send_message("‚ùå Diret√≥rio n√£o encontrado!", ephemeral=True)

    def build_tree(path, prefix):
        itens = os.listdir(path)
        dirs = [item for item in itens if os.path.isdir(os.path.join(path, item))]
        files = [item for item in itens if os.path.isfile(os.path.join(path, item))]
        combinados = dirs + files

        linhas = []
        for idx, item in enumerate(combinados):
            is_last = (idx == len(combinados) - 1)
            branch = "‚îî‚îÄ‚îÄ" if is_last else "‚îú‚îÄ‚îÄ"
            item_path = os.path.join(path, item)
            if os.path.isdir(item_path):
                linhas.append(f"{prefix}{branch} üìÅ {item}/")
                novo_prefix = prefix + ("    " if is_last else "‚îÇ   ")
                linhas.extend(build_tree(item_path, novo_prefix))
            else:
                linhas.append(f"{prefix}{branch} üìÑ {item}")
        return linhas

    tree_lines = build_tree(diretorio, "‚îÇ   ")
    lista_arquivos = f"üìÇ {os.path.basename(diretorio)}/\n" + "\n".join(tree_lines) if tree_lines else "üìÇ Diret√≥rio vazio."

    if len(lista_arquivos) > 2000:
        with open("lista_arquivos.txt", "w", encoding="utf-8") as f:
            f.write(lista_arquivos)
        await interaction.response.send_message("üìú Lista de arquivos:", file=discord.File("lista_arquivos.txt"))
        os.remove("lista_arquivos.txt")
    else:
        await interaction.response.send_message(f"**Arquivos e pastas em `{diretorio}`:**\n```\n{lista_arquivos}\n```")
@bot.tree.command(name="parar", description="Para a reprodu√ß√£o e limpa a fila")
async def parar(interaction: discord.Interaction):
    guild_id = interaction.guild.id
    vc = voice_clients.get(guild_id)
    
    if not vc or not vc.is_playing():
        return await interaction.response.send_message("‚ùå N√£o h√° √°udio tocando!", ephemeral=True)
    
    queues[guild_id] = []  # Limpa a fila
    vc.stop()
    await interaction.response.send_message("‚èπÔ∏è Reprodu√ß√£o interrompida e fila limpa!")
@bot.tree.command(name="sair", description="Faz o bot sair do canal de voz e limpa a fila de reprodu√ß√£o")
async def sair(interaction: discord.Interaction):
    vc = voice_clients.pop(interaction.guild.id, None)
    if not vc:
        return await interaction.response.send_message("‚ùå N√£o estou em um canal de voz!", ephemeral=True)
    
    queues.pop(interaction.guild.id, None)  # Limpa a fila de reprodu√ß√£o
    await vc.disconnect()
    await interaction.response.send_message("üëã Sa√≠ do canal de voz e limpei a fila de reprodu√ß√£o!")
@bot.tree.command(name="pular", description="Pula para o pr√≥ximo √°udio na fila")
async def pular(interaction: discord.Interaction):
    guild_id = interaction.guild.id
    vc = voice_clients.get(guild_id)
    
    if not vc or not vc.is_playing():
        return await interaction.response.send_message("‚ùå Nenhum √°udio est√° tocando!", ephemeral=True)
    
    vc.stop()
    await interaction.response.send_message("‚è≠Ô∏è Pulando para o pr√≥ximo √°udio...")
    
    play_next(guild_id)
@bot.tree.command(name="fila", description="Mostra a fila de √°udios")
async def fila(interaction: discord.Interaction):
    guild_id = interaction.guild.id
    queue = queues.get(guild_id, [])
    
    if not queue:
        return await interaction.response.send_message("üé∂ A fila est√° vazia!", ephemeral=True)
    
    lista = "\n".join([f"{idx+1}. {os.path.basename(track)}" for idx, track in enumerate(queue)])
    await interaction.response.send_message(f"üìú **Fila de reprodu√ß√£o:**\n```\n{lista}\n```")

@bot.tree.command(name="roletarussa", description="Vida ou morte.")
async def roletarussa(interaction: discord.Interaction):
    result = random.randrange(0,100)
    if result <= 14:
        await interaction.response.send_message(f"Voc√™ **morreu**")
    else:
        await interaction.response.send_message("Voc√™ *sobrevive*")

@bot.tree.command(name="missao", description="Receba uma miss√£o")
async def missao(interaction: discord.Interaction):
    missoes = [
    "No meio de uma conversa s√©ria, olha pra algu√©m e diz: 'Mano, eu tava pensando aqui... Tu deixaria eu te dar uma mamada?' com a cara mais s√©ria poss√≠vel.",
    "Sempre que algu√©m falar contigo por 10 minutos, responde s√≥ com gestos, olhares intensos e mordendo os l√°bios.",
    "Liga pra um n√∫mero aleat√≥rio da tua lista de contatos e fala 'Voc√™ sabe por que eu liguei...' e fica em sil√™ncio esperando a rea√ß√£o.",
    "Entra no chat da pessoa mais improv√°vel e manda: 'Mano, n√£o sei como te contar isso, mas eu sonhei que a gente se pegava. E foi bom.'",
    "Finge que acabou de encontrar Jesus/Buda/um Alien e tenta converter um amigo do grupo de maneira fan√°tica.",
    "Escreve uma resenha absurda no status do WhatsApp, tipo: 'Recomendo a experi√™ncia de levar uma dedada no cu. Profundo e emocionante.'",
    "Pede pra algu√©m abrir o Google na tua frente e digita: '√â normal sentir prazer em...' e deixa o autocorretor terminar.",
    "Manda um √°udio gemendo no grupo da fam√≠lia e depois responde: 'Foi sem querer, meu cachorro pisou no microfone.'",
    "Chama um desconhecido no Instagram e conta uma hist√≥ria totalmente falsa sobre como voc√™s j√° foram melhores amigos na inf√¢ncia.",
    "No meio de uma call, come√ßa a discursar como se fosse um coach ultra motivacional sobre o 'poder da mamada' para o sucesso.",
    f"Manda uma mensagem pro {randomuser()} dizendo: 'Sonhei que a gente se pegava na for√ßa do √≥dio, mas no final gostei. O que isso significa?' e espera a resposta.",
    f"Chega no {randomuser()} e fala bem s√©rio: 'Eu vendi tua cueca/calcinha usada na deep web por R$350, foi mal.' e v√™ a rea√ß√£o.",
    f"Faz um gemido bem convincente no ouvido do {randomuser()} e diz: 'Desculpa, n√£o consegui me segurar.'",
    f"Liga pro {randomuser()} e come√ßa a respirar fundo no telefone, depois solta: 'Tu tem ideia do que tu fez comigo naquela noite?' e desliga.",
    f"Manda pro {randomuser()}: 'Preciso ser honesto... Minha m√£e me pegou vendo tuas fotos e perguntou se tu era meu crush.'",
    f"Olha pro {randomuser()} no meio de um papo aleat√≥rio e diz: 'Tu j√° experimentou chupar um ded√£o do p√©? Porque eu sonhei que fazia isso contigo.'",
    f"Chega no {randomuser()} e fala: 'Preciso te contar... Eu tatuei teu nome numa √°rea √≠ntima, mas s√≥ te mostro se tu pedir com carinho.'",
    f"Manda um √°udio pro {randomuser()} gemendo e depois explica: 'Foi sem querer, tava testando meu novo microfone ASMR.'",
    f"Vai no PV do {randomuser()} e manda: 'Ei... Quanto tu cobraria pra pisar em mim de coturno?' e mant√©m a conversa s√©ria.",
    f"Faz uma aposta com {randomuser()}, perde de prop√≥sito e depois fala: 'Aposta √© aposta, agora tu tem que me deixar morder tua orelha.'"
]
    await interaction.response.send_message(random.choice(missoes))

@bot.tree.command(name="piada", description="Piadocas pesadonas")
async def piada(interaction: discord.Interaction):
    piadas = [
    "Se eu fosse teu espelho, eu me quebrava pra n√£o ter que te ver.",
    "Teu c√©rebro √© tipo uma caixa de f√≥sforos: quando acende, n√£o dura muito.",
    "Tu √© tipo um Wi-Fi, porque est√° sempre sem sinal de relev√¢ncia.",
    "Eu n√£o sou psic√≥logo, mas te diria que teu √∫nico problema √© ser voc√™.",
    "Eu te daria um conselho, mas tua vida j√° t√° bagun√ßada demais.",
    "Tu √© t√£o in√∫til quanto um arroz sem feij√£o.",
    "O √∫nico lugar que voc√™ deve estar √© dentro de uma c√°psula do tempo, pra nunca mais sair.",
    "Teu corpo √© uma obra de arte... e o museu est√° em chamas.",
    "Tu j√° pensou em fazer uma cirurgia pl√°stica no c√©rebro?",
    "Teu futuro √© t√£o brilhante quanto uma l√¢mpada queimada.",
    "O que voc√™ faz de bom √© se esconder bem.",
    "Se tua intelig√™ncia fosse combust√≠vel, n√£o dava pra ligar uma l√¢mpada.",
    "Eu faria uma piada sobre tua vida, mas ela √© tr√°gica demais para piadas.",
    "Sua voz √© t√£o agrad√°vel quanto um gato sendo atropelado.",
    "Se voc√™ fosse uma pe√ßa de Lego, estaria perdida no fundo da caixa.",
    "Tu n√£o √© feio, s√≥ √© uma prova de que o Photoshop n√£o salva tudo.",
    "Se eu te seguisse em redes sociais, eu bloqueava todo mundo em volta.",
    "Eu te chamaria de in√∫til, mas nem isso tu consegue ser.",
    "Seu c√©rebro √© tipo uma cebola: quanto mais voc√™ mexe, mais causa dor.",
    "Voc√™ √© t√£o importante quanto um peda√ßo de papel higi√™nico usado.",
    "Eu te consideraria uma pessoa incr√≠vel, se n√£o fosse t√£o pat√©tico.",
    "Tu n√£o √© feio, tu √© mais uma homenagem a todos os erros gen√©ticos.",
    "Teu corpo √© um parque de divers√µes‚Ä¶ mas ningu√©m quer entrar.",
    "Se tua vida fosse uma s√©rie, seria um drama sem audi√™ncia.",
    "Tu √© a prova viva de que a evolu√ß√£o n√£o aconteceu em todas as esp√©cies.",
    "Se eu fosse um gato, teria medo de passar perto de voc√™.",
    "Tu √© t√£o sem gra√ßa quanto um powerpoint sem anima√ß√µes.",
    "Tu parece aquele personagem que morreu no epis√≥dio 1 da s√©rie, mas ainda aparece pra dar d√≥.",
    "Se teu rosto fosse um t√≠tulo de filme, seria 'Como Arruinar Uma Carreira Em Uma Imagem'.",
    "Tu deve ser uma edi√ß√£o limitada de 'desastre de design'.",
    "Se tu fosse uma s√©rie, seria cancelada depois do primeiro epis√≥dio.",
    "Teu sorriso √© t√£o acolhedor quanto uma faca.",
    "Eu n√£o sou de julgar, mas tu √© basicamente um teste de paci√™ncia.",
    "Tu tem o carisma de uma mesa de escrit√≥rio.",
    "Voc√™ n√£o √© gordo, s√≥ tem mais personalidade.",
    "Tu √© o tipo de pessoa que faz um espelho quebrar s√≥ de se olhar nele.",
    "Seu c√©rebro √© como um celular sem internet: n√£o funciona direito.",
    "Eu n√£o te chamei de feio, mas eu falei da sua foto no seu perfil.",
    "Se seu rosto fosse uma arte moderna, ningu√©m entenderia.",
    "Eu te amo como eu amo uma sopa sem tempero.",
    "Tu √© a mistura de um dia de chuva com uma sexta-feira 13.",
    "Eu n√£o te julgo, mas teu karma est√° em greve.",
    "Voc√™ √© t√£o insuport√°vel quanto um fone de ouvido embara√ßado.",
    "Seu corpo √© como um software desatualizado, n√£o serve pra nada.",
    "Tu tem a gra√ßa de um pato tentando andar de patins.",
    "Se tua vida fosse um jogo, seria a vers√£o demo.",
    "Tu n√£o √© feio, mas √© um dos melhores exemplos de teoria da evolu√ß√£o.",
    "Teu cora√ß√£o √© como um servidor cheio de erros 404.",
    "Voc√™ tem o charme de uma rachadura na parede.",
    "Tu √© a vers√£o beta do ser humano.",
    "Voc√™ n√£o √© um problema, mas definitivamente √© uma distra√ß√£o.",
    "Teu sentido de humor √© igual a uma piada sem punchline.",
    "Voc√™ √© como o efeito borboleta, mas no lado errado da hist√≥ria.",
    "Teu rosto deveria vir com uma placa de 'Aviso: pode causar ins√¥nia'.",
    "Tu √© a pessoa que faz o wifi cair s√≥ com a presen√ßa.",
    "Se tu fosse uma m√∫sica, seria aquela em loop que ningu√©m aguenta mais.",
    "Tu deve ser o motivo pelo qual os espelhos se trincam.",
    "Voc√™ deve ser um filme de terror, porque ningu√©m quer olhar pra voc√™.",
    "Tu √© a prova de que algumas ideias n√£o deveriam sair da cabe√ßa.",
    "Seu estilo √© t√£o √∫nico quanto um par de crocs com meias.",
    "Voc√™ tem a eleg√¢ncia de um hipster tentando usar terno.",
    "Tu n√£o √© de assustar, mas com certeza √© de incomodar.",
    "Se tu fosse um livro, seria um daqueles que ningu√©m compra.",
    "Tu tem a gra√ßa de uma pedra no meio do caminho.",
    "Seu c√©rebro est√° mais travado do que uma atualiza√ß√£o do Windows.",
    "Tu tem o charme de um produto gen√©rico.",
    "Se voc√™ fosse uma flor, seria aquela que morreu na floricultura.",
    "Tu √© a resposta errada da equa√ß√£o da vida.",
    "Teu corpo √© t√£o esquel√©tico quanto um esqueleto de brinquedo.",
    "Voc√™ tem a profundidade emocional de uma piscina rasa.",
    "Tu n√£o √© gordo, s√≥ est√° indo al√©m dos limites do normal.",
    "Se sua vida fosse um jogo de tabuleiro, voc√™ j√° teria perdido.",
    "Tu tem a simpatia de uma parede de concreto.",
    "Seu c√©rebro funciona como uma geladeira velha: faz barulho, mas n√£o resolve nada.",
    "Tu √© mais in√∫til que um controle remoto sem pilha.",
    "Voc√™ deve ser a raz√£o pela qual as palavras se tornam obsoletas.",
    "Teu cheiro √© t√£o agrad√°vel quanto um chul√© de meia.",
    "Se tu fosse uma comida, seria miojo sem tempero.",
    "Teu c√©rebro √© igual a uma faca cega: n√£o serve pra nada.",
    "Eu te chamaria de estrela, mas tu brilha mais do que um apagador de quadro.",
    "Tu √© a pessoa que at√© o Google te evita.",
    "Teu futuro √© t√£o incerto quanto a internet de uma zona rural.",
    "Tu deve ser a pior decis√£o que teus pais tomaram.",
    "Tu √© como uma m√∫sica ruim: ningu√©m quer ouvir.",
    "Teu n√≠vel de carisma √© menor que a energia de uma bateria descarregada.",
    "Se eu fosse teu chefe, te mandava embora s√≥ pela cara.",
    "Tu √© como um carro velho: ningu√©m quer pegar.",
    "Tu deve ser aquele erro que todos os programadores tentam esconder.",
    "Seu c√©rebro √© tipo um Wi-Fi ruim: todo mundo tenta, mas ningu√©m conecta.",
    "Tu n√£o tem chance no amor, mas tem no √≥dio.",
    "Tu √© o tipo de pessoa que at√© os fantasmas fogem.",
    "Voc√™ n√£o √© chato, s√≥ √© uma falha de sistema.",
    "Tu √© como um teste de matem√°tica que todo mundo erra.",
    "Teu rosto √© como uma obra de arte... uma obra mal feita.",
    "Voc√™ tem o talento de uma planta sem ra√≠zes.",
    "Tu tem a intelig√™ncia de um aspirador de p√≥, mas com menos utilidade.",
    "Eu te chamaria de ot√°rio, mas nem isso tu conseguiria ser.",
    "Tu n√£o √© feio, mas tamb√©m n√£o √© bonito, √© apenas... um erro.",
    "Voc√™ √© o tipo de pessoa que nem um cachorro gostaria de ter como dono.",
    "Tu √© tipo um espelho rachado: n√£o reflete nada de bom.",
    "Teu rosto √© como uma febre: n√£o passa, mas tamb√©m n√£o serve pra nada.",
    "Se tua vida fosse uma pe√ßa de teatro, seria cancelada na primeira temporada.",
    "Voc√™ √© como um jogo de videogame de 8 bits: velho, feio, mas ainda tenta.",
    "Tu n√£o √© est√∫pido, mas t√° chegando l√°.",
    "Teu c√©rebro deve ser uma planilha do Excel: cheio de f√≥rmulas que ningu√©m entende.",
    "Tu tem o charme de um chinelo velho.",
    "Se eu tivesse que fazer uma compara√ß√£o, diria que voc√™ √© o erro 404 da vida.",
    "Voc√™ √© tipo um caminh√£o sem carga: s√≥ ocupa espa√ßo.",
    "Tu √© o oposto da felicidade, √© como um buraco no meio da pra√ßa.",
    "Tu √© como uma mosca em uma festa de casamento: sempre no momento errado.",
    "Teu cora√ß√£o √© t√£o quente quanto uma x√≠cara de caf√© esquecido.",
    "Voc√™ √© como um meme velho: ningu√©m mais ri.",
    "Tu √© mais chato que uma mariposa batendo na luz.",
    "Seu sorriso √© t√£o acolhedor quanto uma l√¢mpada queimada.",
    "Voc√™ √© como uma piada sem punchline: ningu√©m ri, mas ningu√©m reclama.",
    "Teu charme √© como a pol√≠tica: ningu√©m acredita."
]
    await interaction.response.send_message(random.choice(piadas))

# Inicia o bot
bot.run(DISCORDTOKEN)