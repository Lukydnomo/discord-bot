name: Run Discord Bot

on:
  push:
    branches:
      - main  # Executa o workflow ao fazer push na branch 'main'
  workflow_dispatch:  # Permite iniciar manualmente
  schedule:
    - cron: '0 */6 * * *'  # Executa a cada 6 horas

jobs:
  run-bot:
    runs-on: ubuntu-latest

    steps:
      # Passo 1: Checkout do código mais recente
      - name: Checkout Code
        uses: actions/checkout@v3

      # Passo 2: Configurar Python
      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.x'

      # Passo 3: Instalar dependências
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          
      # Restaurar o cache (se existir)
      - name: Restaurar cache da variável
        uses: actions/cache@v3
        with:
          path: sessaoclosedopen.json
          key: ${{ runner.os }}-fdabot-sessaoclosedopen
          restore-keys: |
            ${{ runner.os }}-fdabot-sessaoclosedopen

      # Passo 4: Executar o bot
      - name: Run Bot
        id: run_bot
        run: |
          echo "Iniciando o bot..."
          python main.py
        env:
          DISCORD_BOT_TOKEN: ${{ secrets.DISCORD_BOT_TOKEN }}

      # Passo 5: Salvar o estado da variável após o bot terminar
      - name: Salvar variável no cache
        if: ${{ always() }}  # Garante que essa etapa será executada mesmo em falhas ou cancelamentos
        run: |
          echo "Salvando a variável no cache..."
          python salvar_variavel.py ${{ steps.run_bot.outputs.sessaoclosedopen }}  # Passando o valor da variável como argumento

      # Etapa de cache após a execução
      - name: Cache variável sessaoclosedopen
        uses: actions/cache@v3
        with:
          path: sessaoclosedopen.json
          key: ${{ runner.os }}-fdabot-sessaoclosedopen
